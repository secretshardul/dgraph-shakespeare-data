type Paragraph {
    paragraphId: String! @id
    charCount: Int
    paragraphNum: Int
    paragraphType: String
    phoneticText: String
    plainText: String @search(by: [fulltext])
    section: Int
    stemText: String
    wordCount: Int
    chapterName: Int # Todo connect with Chapter
    work: Work
    character: Character
}

type Character {
    charId: String! @id
    abbrev: String
    charName: String
    description: String
    speechCount: Int
    works: [Work]
    paragraphs: [Paragraph] @hasInverse(field: character)
}

type Quotation {
    quotationId: String! @id
    quotationText: String!
    location: String
}

type Work {
    workId: String! @id
    longTitle: String
    shortTitle: String
    source: String
    title: String
    totalParagraphs: Int
    totalWords: Int
    date: Int
    genre: Genre @hasInverse(field: works) # extra field
    paragraphs: [Paragraph] @hasInverse(field: work)
    chapters: [Chapter] @hasInverse(field: work)
    characters: [Character] @hasInverse(field: works)
}

type Chapter {
    chapterId: String! @id
    name: String
    description: String
    section: Int
    work: Work
}

type Genre {
    genreType: String! @id
    genreName: String!
    works: [Work] @hasInverse(field: genre)
}
